<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Calendario - {{username}}</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/static/css/styles.css">
  <style>
    body {
      background-color: #f8f9fa;
    }
    header {
      background-color: #343a40;
      color: #fff;
      padding: 1rem 0;
      margin-bottom: 1.5rem;
    }
    header h1 {
      font-size: 2rem;
    }
    .back-btn {
      color: #343a40;
      background-color: #ffc107;
      padding: 0.5rem 1rem;
      border-radius: 5px;
      text-decoration: none;
      font-weight: bold;
    }
    .back-btn:hover {
      background-color: #e0a800;
      color: #fff;
    }
    .calendar-table th, .calendar-table td {
      vertical-align: middle;
      text-align: center;
    }
    .calendar-table .slot {
      cursor: pointer;
      transition: background-color 0.3s;
      min-height: 80px;
    }
    .calendar-table .slot:hover {
      background-color: #e9ecef;
    }
    .appointment {
      background-color: #d4edda;
      padding: 0.3rem;
      border-radius: 5px;
      font-size: 0.9rem;
      margin-bottom: 0.3rem;
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header>
    <div class="container d-flex justify-content-between align-items-center">
      <h1>Calendario Settimanale</h1>
      <a href="/utente/home" class="back-btn">Torna alla home</a>
    </div>
    <div class="container">
      <p class="mb-0">Benvenuto, {{username}}</p>
      <p id="weekRange"></p>
    </div>
  </header>

  <!-- Navigazione tra le settimane -->
  <div class="container mb-3">
    <div class="d-flex justify-content-between">
      <button id="prevWeek" class="btn btn-outline-primary">Settimana Precedente</button>
      <button id="nextWeek" class="btn btn-outline-primary">Settimana Successiva</button>
    </div>
  </div>

  <!-- Calendario -->
  <main class="container">
    <div class="table-responsive">
      <table class="table table-bordered calendar-table">
        <thead class="table-light" id="calendarHeader">
          <!-- Header generato dinamicamente -->
        </thead>
        <tbody id="calendarBody">
          <!-- Corpo generato dinamicamente -->
        </tbody>
      </table>
    </div>
  </main>

  <!-- Modal per la prenotazione -->
  <div class="modal fade" id="appointmentModal" tabindex="-1" aria-labelledby="appointmentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="appointmentModalLabel">Prenota Appuntamento</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
        </div>
        <div class="modal-body">
          <form id="appointmentForm">
            <div class="mb-3">
              <label for="modalDate" class="form-label">Data</label>
              <input type="text" class="form-control" id="modalDate" name="data" readonly>
            </div>
            <div class="mb-3">
              <label for="modalTime" class="form-label">Ora</label>
              <input type="text" class="form-control" id="modalTime" name="ora" readonly>
            </div>
            <div class="mb-3">
              <label for="modalDescription" class="form-label">Descrizione</label>
              <textarea class="form-control" id="modalDescription" name="descrizione" rows="3" required></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
          <button type="button" class="btn btn-primary" onclick="saveAppointment()">Salva</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Socket.io -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Calcolo della settimana corrente e navigazione
    let currentDate = new Date();

    function getWeekRange(date) {
      const currentDay = date.getDay(); // 0 (Domenica) - 6 (Sabato)
      const diffToMonday = (currentDay === 0 ? -6 : 1 - currentDay);
      const diffToSunday = (currentDay === 0 ? 0 : 7 - currentDay);
      const monday = new Date(date);
      monday.setDate(date.getDate() + diffToMonday);
      const sunday = new Date(date);
      sunday.setDate(date.getDate() + diffToSunday);
      return { monday, sunday };
    }

    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }

    // Genera l'header del calendario (nome del giorno e data sotto)
    function renderCalendarHeader(weekDays) {
      const header = document.getElementById('calendarHeader');
      header.innerHTML = '';
      const row = document.createElement('tr');
      const thTime = document.createElement('th');
      thTime.innerText = 'Ora';
      row.appendChild(thTime);
      weekDays.forEach(day => {
        const th = document.createElement('th');
        th.innerHTML = `<div>${day.name}</div><div style="font-size:0.9rem;">${day.date}</div>`;
        row.appendChild(th);
      });
      header.appendChild(row);
    }

    // Genera il corpo del calendario (ore e slot)
    function renderCalendarBody(weekDays, ore) {
      const body = document.getElementById('calendarBody');
      body.innerHTML = '';
      ore.forEach(time => {
        const row = document.createElement('tr');
        const tdTime = document.createElement('td');
        tdTime.innerText = time;
        row.appendChild(tdTime);
        weekDays.forEach(day => {
          const td = document.createElement('td');
          td.classList.add('slot');
          td.id = `slot-${day.date}-${time}`;
          td.addEventListener('click', () => openModal(day.date, time));
          // Qui, se vuoi, puoi inserire gli appuntamenti gi√† prenotati tramite un'altra funzione AJAX
          row.appendChild(td);
        });
        body.appendChild(row);
      });
    }

    function renderWeek() {
      const { monday, sunday } = getWeekRange(currentDate);
      const weekDays = [];
      for (let i = 0; i < 7; i++) {
        const d = new Date(monday);
        d.setDate(monday.getDate() + i);
        const options = { weekday: 'long' };
        const dayName = d.toLocaleDateString('it-IT', options);
        weekDays.push({
          name: dayName.charAt(0).toUpperCase() + dayName.slice(1),
          date: formatDate(d)
        });
      }
      document.getElementById('weekRange').innerText = `Settimana: ${formatDate(monday)} - ${formatDate(sunday)}`;
      renderCalendarHeader(weekDays);
      const ore = ['08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00'];
      renderCalendarBody(weekDays, ore);
    }

    renderWeek();

    document.getElementById('prevWeek').addEventListener('click', () => {
      currentDate.setDate(currentDate.getDate() - 7);
      renderWeek();
    });
    document.getElementById('nextWeek').addEventListener('click', () => {
      currentDate.setDate(currentDate.getDate() + 7);
      renderWeek();
    });

    // Modal per prenotazioni
    let selectedSlot = {};

    function openModal(data, time) {
      selectedSlot = { data, time };
      document.getElementById('modalDate').value = data;
      document.getElementById('modalTime').value = time;
      document.getElementById('modalDescription').value = '';
      var modal = new bootstrap.Modal(document.getElementById('appointmentModal'));
      modal.show();
    }

    async function saveAppointment() {
      const data = document.getElementById('modalDate').value;
      const time = document.getElementById('modalTime').value;
      const descrizione = document.getElementById('modalDescription').value;
      try {
        // Usa l'endpoint basato sul path attuale, ad esempio: /utente/calendario/{{parrucchiere}}/appuntamento
        const response = await fetch(window.location.pathname + '/appuntamento', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ giorno: data, ora: time, descrizione })
        });
        const result = await response.json();
        if (result.success) {
          location.reload();
        } else {
          alert(result.message || 'Errore nella prenotazione.');
        }
      } catch (error) {
        console.error('Errore:', error);
      }
    }

    // Socket.io per aggiornamenti in tempo reale (opzionale)
    const socket = io();
    socket.on('appointmentUpdated', data => {
      // Se l'evento riguarda questo parrucchiere, aggiorna il calendario
      location.reload();
    });
  </script>
</body>
</html>
